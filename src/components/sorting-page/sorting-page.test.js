import {
  choiceSortAscending,
  choiceSortDescending,
  bubleSortAscending,
  bubleSortDescending,
} from "./utils";

describe("алгоритм сортировки выбором по возрастанию", () => {
  test("корректно сортирует пустой массив", () => {
    expect(choiceSortAscending([])).toEqual([[[], -1, -1, 0]]);
  });
  test("корректно сортирует массив из одного элемента", () => {
    expect(choiceSortAscending([1])).toEqual([[[1], -1, -1, 1]]);
  });

  test("корректно сортирует массив из нескольких элементов", () => {
    expect(choiceSortAscending([1, 2, 3])).toEqual([
      [[1, 2, 3], 0, 1, 0],
      [[1, 2, 3], 0, 2, 0],
      [[1, 2, 3], 1, 2, 1],
      [[1, 2, 3], -1, -1, 3],
    ]);
  });
});

describe("алгоритм сортировки пузырьком по возрастанию", () => {
  test("корректно сортирует пустой массив", () => {
    expect(bubleSortAscending([])).toEqual([[[], -1, -1, -1]]);
  });
  test("корректно сортирует массив из одного элемента", () => {
    expect(bubleSortAscending([1])).toEqual([[[1], -1, -1, -1]]);
  });

  test("корректно сортирует массив из нескольких элементов", () => {
    expect(bubleSortAscending([1, 3, 2])).toEqual([
      [[1, 2, 3], 1, 2, 2],
      [[1, 2, 3], -1, -1, -1],
    ]);
  });
});

describe("алгоритм сортировки выбором по убыванию", () => {
  test("корректно сортирует пустой массив", () => {
    expect(choiceSortDescending([])).toEqual([[[], -1, -1, 0]]);
  });
  test("корректно сортирует массив из одного элемента", () => {
    expect(choiceSortDescending([1])).toEqual([[[1], -1, -1, 1]]);
  });

  test("корректно сортирует массив из нескольких элементов", () => {
    expect(choiceSortDescending([1, 3, 2])).toEqual([
      [[1, 3, 2], 0, 1, 0],
      [[1, 3, 2], 1, 2, 0],
      [[3, 1, 2], 1, 2, 1],
      [[3, 2, 1], -1, -1, 3],
    ]);
  });
});

describe("алгоритм сортировки пузырьком по убыванию", () => {
    test("корректно сортирует пустой массив", () => {
      expect(bubleSortDescending([])).toEqual([[[], -1, -1, -1]]);
    });
    test("корректно сортирует массив из одного элемента", () => {
      expect(bubleSortDescending([1])).toEqual([[[1], -1, -1, -1]]);
    });
  
    test("корректно сортирует массив из нескольких элементов", () => {
      expect(bubleSortDescending([1, 3, 2])).toEqual([
        [[3, 1, 2], 0, 1, 2],
        [[3, 2, 1], 1, 2, 2],
        [[3, 2, 1], -1, -1, -1],
      ]);
    });
  });